@page "/employee"
@page "/employee/{employeeIdEdit:int}"

@using BlazorCrud.Shared.Dtos.Employee;
@using BlazorCrud.Shared.Dtos.Departament.Response;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorCrud.Client.Services;
@using BlazorCrud.Client.Interfaces;

@inject SweetAlertService Swal;
@inject IEmployeeService employeeService;
@inject IDepartamentService departamentService;
@inject NavigationManager navigation;

<h2>Employee</h2>

<EditForm Model="employee" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label class="form-label">Full Name</label>
        <InputText class="form-control" @bind-Value="employee.FullName"></InputText>
        <ValidationMessage For="@(() => employee.FullName)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Department</label>
        <InputSelect class="form-select" @bind-Value="employee.DepartamentId">
            <option value="0">--Select</option>
            @foreach (var item in departamentList)
            {
                <option value="@item.DepartamentId">@item.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => employee.DepartamentId)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Salary</label>
        <InputNumber class="form-control" @bind-Value="employee.Salary"></InputNumber>
        <ValidationMessage For="@(() => employee.Salary)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Contract Date</label>
        <InputDate class="form-control" @bind-Value="employee.ContractDate"></InputDate>
        <ValidationMessage For="@(() => employee.ContractDate)"></ValidationMessage>
    </div>

    <button class="btn btn-primary" type="submit">@btnText</button>
    <a class="btn btn-warning" href="employees">Back</a>
</EditForm>

@code {

    [Parameter]
    public int employeeIdEdit { get; set; } = 0;
    string title = string.Empty;
    string btnText = string.Empty;

    EmployeeDto employee = new EmployeeDto();
    List<DepartamentResponseDto> departamentList = new List<DepartamentResponseDto>();

    protected override async Task OnInitializedAsync()
    {
        if (employeeIdEdit != 0)
        {
            employee = await employeeService.GetEmployeeById(employeeIdEdit);
            btnText = "Employee Update";
            title = "Employee Update";
            
        }
        else
        {
            employee.ContractDate = DateTime.Today;
            btnText = "Employee Save";
            title = "New Employee";
        }
      
        departamentList = await departamentService.DepartamentList();    
    }

    private async Task OnValidSubmit()
    {
        int id = 0;
        if (employeeIdEdit == 0)
            id = await employeeService.Register(employee);
        else
            id = await employeeService.EditEmployee(employee, employeeIdEdit);

        if (id != 0)
            navigation.NavigateTo("/employees");

    }
}
